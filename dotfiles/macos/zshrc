# Start of .zshrcfile

# Start profiling if requested.
if [[ -n "$ZSH_PROFILE" ]]; then
  zmodload zsh/zprof
fi

# Load PATH
export PATH="/usr/local/bin/:/usr/local/sbin:$HOME/Library/Python/3.9/bin:$HOME/.config/composer/vendor/bin:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/.local/share/JetBrains/Toolbox/scripts:/Applications/Docker.app/Contents/Resources/bin/:$PATH"

# Init ohmyzsh
export ZSH="$HOME/.oh-my-zsh"

# OhMyZSH Theme
ZSH_THEME="powerlevel10k/powerlevel10k" # Set ohmyzsh theme

# OhMyZSH Auto Updater
zstyle ':omz:update' mode auto # Update automatically without asking
zstyle ':omz:update' frequency 3 # Update every 3 days

# Set waiting for completions message
COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"

# Load OhMyZSH Plugins
plugins=("${(s: :)$(curl -s "https://raw.githubusercontent.com/Im-Fran/Im-Fran/main/dotfiles/ohmyzsh/plugins")}")

# Load OhMyZSH
source $ZSH/oh-my-zsh.sh

# Variables
LANG="en_US.UTF-8"
LC_ALL="$LANG"
GNUPGHOME="$HOME/.gnupg"
GPG_TTY=$(tty)

# Load other packages
## cargo ##
if [ -d "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

# Load homebrew
if [[ $(uname -p) == "arm" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
else 
  eval "$(/usr/local/bin/brew shellenv)"
fi

export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/.local/bin:$PATH"

## phpver ##
if [ -f ".phpver" ] && [ -z "$NO_PHPENV" ]; then
	PHPVER=$(cat .phpver)
	BREW_PHP_VERSIONS_CHECK=$(brew list --versions | grep "php.*$PHPVER")
	if ! [ "$BREW_PHP_VERSIONS_CHECK" = "" ]; then
        echo "Loading php..."
        brew unlink php > /dev/null 2>&1
		# Only from 7.4 - 8.2 cuz those are the ones I use, if you want to feel free to add more.
		# Also I don't use the variable cuz it seems to have issues in ubuntu.
		if [ "$PHPVER" = "8.2" ]; then
            brew link php@8.2 --force > /dev/null 2>&1
            echo "Loaded PHP v8.2"
		elif [ "$PHPVER" = "8.1" ]; then
            brew link php@8.1 --force > /dev/null 2>&1
            echo "Loaded PHP v8.1"
		elif [ "$PHPVER" = "8.0" ]; then
            brew link php@8.0 --force > /dev/null 2>&1
            echo "Loaded PHP v8.0"
		elif [ "$PHPVER" = "7.4" ]; then
            brew link php@7.4 --force > /dev/null 2>&1
            echo "Loaded PHP v7.4"
		fi
	fi
fi

## run-script ##
runscript () {
    if [[ $# -lt 1 ]]; then
        echo "Usage: runscript <scriptname> [args...]"
        return 1
    fi

    local script_name="$1"
    local script_url="https://github.com/Im-Fran/Im-Fran/raw/main/dotfiles/scripts/${script_name}"
    local cache_dir="$HOME/.cache/runscript"
    local local_script="$cache_dir/$script_name"

    mkdir -p "$cache_dir"

    # Function to calculate MD5 hash
    calculate_md5() {
        if command -v md5sum &> /dev/null; then
            md5sum | awk '{print $1}'
        elif command -v md5 &> /dev/null; then
            md5
        else
            echo "Error: No MD5 utility available."
            return 1
        fi
    }

    # Check and update the script if needed
    if [ -f "$local_script" ]; then
        echo "Checking for updates to $script_name..."
        # Fetch remote script MD5
        remote_md5=$(curl -fsSL -H "Cache-Control: no-cache" "$script_url" | calculate_md5)
        if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch remote script MD5."
            return 1
        fi

        # Calculate local script MD5
        local_md5=$(cat "$local_script" | calculate_md5)
        if [ "$remote_md5" != "$local_md5" ]; then
            echo "Updating script: $script_name"
            curl -fsSL -H "Cache-Control: no-cache" "$script_url" -o "$local_script" || { echo "Error: Failed to update the script."; return 1; }
        else
            echo "Script $script_name is up to date."
        fi
    else
        echo "Downloading script: $script_name"
        curl -fsSL -H "Cache-Control: no-cache" "$script_url" -o "$local_script" || { echo "Error: Failed to fetch the script."; return 1; }
    fi

    # Ensure the script is executable
    chmod +x "$local_script"

    # Execute the script
    shift
    zsh "$local_script" "$@"
}


## copilot cli ##
command -v github-copilot-cli >/dev/null 2>&1 && eval "$(github-copilot-cli alias -- "$0")"

# Setup aliases
alias zshconfig="nano ~/.zshrc"
alias yarnconfig="nano ~/.yarnrc"
alias nvimrc="nano ~/.config/nvim/init.vim"
alias sail="[ -f sail ] && sh sail || sh vendor/bin/sail"
alias delete-old-cached-branches="git fetch origin --prune"
alias run-script='runscript'
alias profilezsh='zshrcProfile() { export ZSH_PROFILE=true; exec zsh }; zshrcProfile'

# Functions
update_zshrc() {
    # Verificar si hay conexión a internet
    if ! nc -zw1 google.com 443 >/dev/null 2>&1; then
        echo "Error: No network connection available. Stopping ZSHRC Update." >&2
        return 1
    fi

    # URL del archivo remoto .zshrc
    local url="https://raw.githubusercontent.com/Im-Fran/Im-Fran/main/dotfiles/macos/zshrc"

    # Descargar el contenido remoto y guardarlo en una variable
    local remote_zshrc_content
    remote_zshrc_content=$(curl -sH 'Cache-Control: no-cache' "$url")

    # Si el contenido está vacío o hay un error, no hacer nada
    if [[ -z "$remote_zshrc_content" ]]; then
        echo "Error: Remote content is empty or could not be fetched. Skipping update."
        return 1
    fi

    # Leer el hash MD5 del archivo local .zshrc
    local local_md5 remote_md5
    local_md5=$(md5 -q "$HOME/.zshrc")

    # Calcular el hash MD5 del contenido remoto descargado
    remote_md5=$(echo "$remote_zshrc_content" | md5 -q)

    # Si los hashes son diferentes, reemplazar el contenido local
    if [[ "$local_md5" != "$remote_md5" ]]; then
        echo "$remote_zshrc_content" > "$HOME/.zshrc"
        echo "Updated .zshrc file successfully."
    else
        echo ".zshrc is already up to date."
    fi
}

update_zshrc &!


# Load other utils

# Load swift completion tool
if [ -f "$HOME/.scripts/swift-completion-tool" ]; then
    source $HOME/.scripts/swift-completion-tool
fi

# Load environment variables
if [ -f "$HOME/.env" ]; then
    source $HOME/.env
fi

# Stop profiling
if [[ -n "$ZSH_PROFILE" ]]; then
  zprof
fi
