# Start of .zshrcfile

# Load PATH
export PATH="/usr/local/bin/:/usr/local/sbin:$HOME/Library/Python/3.9/bin:$HOME/.config/composer/vendor/bin:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/.local/share/JetBrains/Toolbox/scripts:/Applications/Docker.app/Contents/Resources/bin/:$HOME/.nvm/current/bin/:$PATH"

# Init ohmyzsh
export ZSH="$HOME/.oh-my-zsh"

# OhMyZSH Theme
ZSH_THEME="robbyrussell" # Set ohmyzsh theme

# OhMyZSH Auto Updater
zstyle ':omz:update' mode auto # Update automatically without asking
zstyle ':omz:update' frequency 3 # Update every 3 days

# Set waiting for completions message
COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"

# Load OhMyZSH Plugins
plugins=(git)

# Load OhMyZSH
source $ZSH/oh-my-zsh.sh

# Variables
LANG="en_US.UTF-8"
LC_ALL="$LANG"
GNUPGHOME="$HOME/.gnupg"
GPG_TTY=$(tty)
NVM_SYMLINK_CURRENT="true"

# Load other packages
## cargo ##
if [ -d "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

## brew ##
if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then # Ubuntu
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
elif [ -f "/usr/local/bin/brew" ]; then # macOS
    eval "$(/usr/local/bin/brew shellenv)"
fi

## setup directories ##
if [[ "$(uname -r)" =~ "microsoft" ]]; then # WSL
    DEVELOPMENT_DIR="/home/fran/Development"
    SDKMAN_DIR="$HOME/.sdkman"
    NVM_DIR="$HOME/.nvm"
    COREPACK_HOME="$HOME/.node/corepack"
elif [[ "$(uname)" =~ "Linux" ]]; then
    DEVELOPMENT_DIR="/home/fran/Development"
    SDKMAN_DIR="$HOME/.sdkman"
    NVM_DIR="$HOME/.nvm"
    COREPACK_HOME="$HOME/.node/corepack"
elif  [[ "$(uname)" =~ "Darwin" ]]; then # macOS
    DEVELOPMENT_DIR="/Volumes/Development"
    SDKMAN_DIR="$DEVELOPMENT_DIR/.sdkman"
    NVM_DIR="$DEVELOPMENT_DIR/.nvm"
    COREPACK_HOME="$DEVELOPMENT_DIR/.node/corepack"
else # Any other system
    DEVELOPMENT_DIR="$HOME/Development"
    SDKMAN_DIR="$HOME/.sdkmanrc"
    NVM_DIR="$HOME/.nvm"
    COREPACK_HOME="$HOME/.node/corepack"
    echo "Unknown System! Please add '$(uname)' to dotfiles."
fi

export PATH="$SDKMAN_DIR/candidates/java/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME_DIR/.fig/bin:$HOME/.local/bin:$PATH"

## Load nvm paths/configs ##
if [ -d "$NVM_DIR/alias/default" ]; then
    export NODE_BINARY="$NVM_DIR/versions/node/v$(cat $NVM_DIR/alias/default)/bin/node"
    export PATH="$NVM_DIR/versions/node/v$(cat $NVM_DIR/alias/default)/bin:$PATH"
    zstyle ':omz:plugins:nvm' lazy true > /dev/null 2>&1 
fi

## phpver ##
if [ -f ".phpver" ] && [ -z "$NO_PHPENV" ]; then
	PHPVER=$(cat .phpver)
	BREW_PHP_VERSIONS_CHECK=$(brew list --versions | grep "php.*$PHPVER")
	if ! [ "$BREW_PHP_VERSIONS_CHECK" = "" ]; then
        echo "Loading php..."
        brew unlink php > /dev/null 2>&1
		# Only from 7.4 - 8.2 cuz those are the ones I use, if you want to feel free to add more.
		# Also I don't use the variable cuz it seems to have issues in ubuntu.
		if [ "$PHPVER" = "8.2" ]; then
            brew link php@8.2 --force > /dev/null 2>&1
            echo "Loaded PHP v8.2"
		elif [ "$PHPVER" = "8.1" ]; then
            brew link php@8.1 --force > /dev/null 2>&1
            echo "Loaded PHP v8.1"
		elif [ "$PHPVER" = "8.0" ]; then
            brew link php@8.0 --force > /dev/null 2>&1
            echo "Loaded PHP v8.0"
		elif [ "$PHPVER" = "7.4" ]; then
            brew link php@7.4 --force > /dev/null 2>&1
            echo "Loaded PHP v7.4"
		fi
	fi
fi

## copilot cli ##
command -v github-copilot-cli >/dev/null 2>&1 && eval "$(github-copilot-cli alias -- "$0")"

# Setup aliases
alias zshconfig="nano ~/.zshrc"
alias yarnconfig="nano ~/.yarnrc"
alias nvimrc="nano ~/.config/nvim/init.vim"
alias sdk="unalias sdk; [[ -s $SDKMAN_DIR/bin/sdkman-init.sh ]] && source $SDKMAN_DIR/bin/sdkman-init.sh; sdk $@"
alias nvm="unalias nvm; [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; nvm $@" # Custom: only load nvm upon first use, because it is slow
alias sail="[ -f sail ] && sh sail || sh vendor/bin/sail"
alias delete-old-cached-branches="git fetch origin --prune"

# Functions
transfer(){ if [ $# -eq 0 ];then echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2;return 1;fi;if tty -s;then file="$1";file_name=$(basename "$file");if [ ! -e "$file" ];then echo "$file: No such file or directory">&2;return 1;fi;if [ -d "$file" ];then file_name="$file_name.zip" ,;(cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null,;else cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;else file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;}
update_zshrc(){if [[ "$(md5sum "$HOME/.zshrc" | awk '{print $1}')" != "$(curl -s https://raw.githubusercontent.com/Im-Fran/Im-Fran/main/dotfiles/ubuntu/zshrc | md5sum | awk '{print $1}')" ]]; then curl -s https://raw.githubusercontent.com/Im-Fran/Im-Fran/main/dotfiles/ubuntu/zshrc > "$HOME/.zshrc";fi}
update_zshrc &!


# Load other utils
## nvmrc ##
if [ -f ".nvmrc" ]; then
    nvm use > /dev/null 2>&1 
fi

## sdkmanrc ##
if [ -f ".sdkmanrc" ]; then
    sdk env > /dev/null 2>&1 
fi

export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"

# Load swift completion tool
if [ -f "$HOME/.scripts/swift-completion-tool" ]; then
    source $HOME/.scripts/swift-completion-tool
fi
